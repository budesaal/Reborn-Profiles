<?xml version="1.0" encoding="utf-8"?>
<!--
  Profile: Sweetnewt (7923)
  Authors: budesaal
-->
<Profile>
  <Name>Sweetnewt</Name>
  <BehaviorDirectory></BehaviorDirectory>
  <Order>
  
	<If condition="not HasAtLeast(7923,1)">
    <Log Message="Start Fishing: Sweetnewt..." />		
		<If condition="not HasAtLeast(2592,50)">
			<Lisbeth IgnoreHome="True" Json="[{'Group':1,'Item':2592,'Amount':198,'Enabled':true,'Type':'Purchase'}]"/>
		</If>
		<If condition="not IsOnSubMap(476)">
			<LisbethTravel ZoneId="132" XYZ="35.11273, 2.200001, 32.23121"/>
			<RunCode Name="TheLavenderBeds"/>
			<LisbethTravel ZoneId="340" XYZ="7.277023, 2.610901, 199.8097" Name="Dock" AllowedVariance="0.0"/>
		</If>
		<RunCode name="Food"/>
		<ExFish Bait="Midge Basket" ShuffleFishSpots="True" Mooch="2" Patience="Patience" MinimumGPPatience="300" ForceCordial="True" Condition="not HasAtLeast(7923,1) and IsTimeBetween(23,24) or IsTimeBetween(0,4) and SkywatcherPlugin.IsWeatherInZone(340, 4)">
			<PatienceTugs>
				<PatienceTug moochLevel="0" TugType="Light" />
				<PatienceTug moochLevel="1" TugType="Heavy" />
			</PatienceTugs>
			<Keepers>
				<Keeper name="Sweetnewt" />
			</Keepers>
			<FishSpots>
				<FishSpot XYZ="-2.58579, 1.740673, 196.7601" Heading="5,572573" Sit="True"/>
			</FishSpots>
		</ExFish>	
	</If>
	<LLoadProfile Path="../../Start.xml"/>
	
  </Order>
  <GrindAreas>
  </GrindAreas>
  <CodeChunks>
  	<CodeChunk Name="Food">
      <![CDATA[
            
                var item = InventoryManager.FilledInventoryAndArmory.First(x => x.RawItemId == 30481);;
            
        Logging.Write(Colors.Aquamarine, "Eating " + item.Name);
        item.UseItem();
        await Coroutine.Wait(5000, () => Core.Player.HasAura(48));            
            
       ]]>
    </CodeChunk>	
	<CodeChunk Name="TheLavenderBeds"><![CDATA[ 
            var unit = GameObjectManager.GetObjectByNPCId(2);
            unit.Target();
            unit.Interact();
            await Coroutine.Sleep(1000);
            await Coroutine.Wait(5000, () => SelectString.IsOpen);
            await Coroutine.Sleep(500);
            if (SelectString.IsOpen)
                SelectString.ClickSlot(1);
            await Coroutine.Sleep(500);
            await Coroutine.Wait(5000, () => SelectString.IsOpen);
            await Coroutine.Sleep(500);
            if (SelectString.IsOpen)
                SelectString.ClickSlot(2);

            await Coroutine.Wait(5000, () => RaptureAtkUnitManager.GetWindowByName("HousingSelectBlock") != null);
            if (RaptureAtkUnitManager.GetWindowByName("HousingSelectBlock") != null)
            {
                RaptureAtkUnitManager.GetWindowByName("HousingSelectBlock").SendAction(1, 3, 0);
                await Coroutine.Wait(5000, () => SelectYesno.IsOpen);

                if (SelectYesno.IsOpen)
                    SelectYesno.Yes();

                await Coroutine.Sleep(5000);

                if (CommonBehaviors.IsLoading) await Coroutine.Wait(-1, () => !CommonBehaviors.IsLoading);
            }

			
		]]></CodeChunk>
  </CodeChunks>
</Profile>