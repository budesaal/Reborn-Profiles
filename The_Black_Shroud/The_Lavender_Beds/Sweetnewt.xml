<?xml version="1.0" encoding="utf-8"?>
<!--
	Profile: Sweetnewt (7923)
	Authors: budesaal, miss-aoi
-->
<Profile>
	<Name>Sweetnewt</Name>
	<BehaviorDirectory></BehaviorDirectory>
	<Order>

		<If condition="not HasAtLeast(7923,1)">
			<Log Message="Start Fishing: Sweetnewt..." />		
			<If condition="not HasAtLeast(2592,50)">
				<Lisbeth IgnoreHome="True" Json="[{'Group':1,'Item':2592,'Amount':50,'Enabled':true,'Type':'Purchase'}]"/>
			</If>
			<If condition="not IsOnSubMap(476)">
				<LisbethTravel ZoneId="132" XYZ="35.11273, 2.200001, 32.23121"/>
				<RunCode Name="TheLavenderBeds"/>
				<LisbethTravel ZoneId="340" XYZ="7.277023, 2.610901, 199.8097"/>
			</If>
			<If Condition="not ClassName == ClassJobType.Fisher">
				<ChangeClass Job="Fisher" />
			</If>
			<While Condition="IsTimeBetween(22,23)" >
				<WaitTimer WaitTime="30" />
			</While>
			<ExFish Bait="Midge Basket" Condition="HasAtLeast(2592,1) and not HasAtLeast(7923,1) and (IsTimeBetween(23,24) or IsTimeBetween(0,4)) and ExBuddy.Helpers.SkywatcherPlugin.IsWeatherInZone(340, 'Fog')"
					MinFish="15" MaxFish="20" ShuffleFishSpots="True" SitRate=".69" ThaliaksFavor="True"
					Mooch="2" Patience="Patience2" MinimumGPPatience="650" ForceCordial="True" >
				<PatienceTugs>
					<PatienceTug moochLevel="0" TugType="Light" />
					<PatienceTug moochLevel="1" TugType="Heavy" />
				</PatienceTugs>
				<Keepers>
					<Keeper name="Sweetnewt" />
				</Keepers>
				<FishSpots>
					<FishSpot XYZ="17.03964, 2.610861, 215.6596" Heading="0.5292695" Sit="True" />
					<FishSpot XYZ="8.996038, 2.61084, 195.7229" Heading="2.25086" Sit="True" />
					<FishSpot XYZ="-6.899338, 1.154556, 192.6779" Heading="4.952633" Sit="True" />
				</FishSpots>
			</ExFish>	
		</If>
		<LLoadProfile Path="../../Start.xml"/>

	</Order>
	<GrindAreas>
	</GrindAreas>
	<CodeChunks>
		<CodeChunk Name="TheLavenderBeds">
			<![CDATA[ 
				var unit = GameObjectManager.GetObjectByNPCId(2);
				unit.Target();
				unit.Interact();
				await Coroutine.Sleep(1000);
				await Coroutine.Wait(5000, () => SelectString.IsOpen);
				await Coroutine.Sleep(500);
				if (SelectString.IsOpen)
					SelectString.ClickSlot(1);
				await Coroutine.Sleep(500);
				await Coroutine.Wait(5000, () => SelectString.IsOpen);
				await Coroutine.Sleep(500);
				if (SelectString.IsOpen)
					SelectString.ClickSlot(2);
				await Coroutine.Wait(5000, () => RaptureAtkUnitManager.GetWindowByName("HousingSelectBlock") != null);

				if (RaptureAtkUnitManager.GetWindowByName("HousingSelectBlock") != null)
				{
					RaptureAtkUnitManager.GetWindowByName("HousingSelectBlock").SendAction(1, 3, 0);
					await Coroutine.Wait(5000, () => SelectYesno.IsOpen);
					if (SelectYesno.IsOpen)
						SelectYesno.Yes();
					await Coroutine.Sleep(5000);
					if (CommonBehaviors.IsLoading)
						await Coroutine.Wait(-1, () => !CommonBehaviors.IsLoading);
				}
			]]>
		</CodeChunk>
	</CodeChunks>
</Profile>
